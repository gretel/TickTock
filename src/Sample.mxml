<?xml version="1.0" encoding="utf-8"?>
<mx:Application
        xmlns:mx="http://www.adobe.com/2006/mxml"
        creationComplete="onCreationComplete()">
    <mx:HBox>
        <mx:TextInput id="tiUrl" text="http://api.flickr.com/services/rest"/>
        <mx:Button label="Connect" click="onUrlFetch()"/>
    </mx:HBox>
    <mx:Button label="Run a for loop (10000000 iterations)" click="onBtnClick()"/>
    <mx:Label text="{_output}"/>
    <mx:Script>
	<![CDATA[
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;
        import mx.rpc.http.HTTPService;

        import net.thepete.TickTock;

        [Bindable]
        private var _output : String = "";

        private function onCreationComplete() : void {
        }

        private function onUrlFetch() : void {
            var httpService : HTTPService = new HTTPService();
            httpService.resultFormat = "text";
            httpService.url = tiUrl.text;
            trace("fetching " + httpService.url);

            httpService.addEventListener(ResultEvent.RESULT, function() : void {
                TickTock.stop();
            });

            httpService.addEventListener(ResultEvent.RESULT, function() : void {
                trace('fetch returned');
                reportTiming(TickTock.elapsedTimeInMiliseconds);
            });

            httpService.addEventListener(FaultEvent.FAULT, function(event : FaultEvent) : void {
                trace('fetch failed: ' + event);
                _output = 'fetch failed: ' + event;
            });

            _output = "fetching...";
            TickTock.start();
            httpService.send();
        }

        private function reportTiming(elapsedMiliseconds : uint) : void {
            _output = "That took " + elapsedMiliseconds + " milliesconds";
        }

        private function onBtnClick() : void {
            var elapsedMiliseconds : uint = TickTock.measure(function() : void {
                doSomeWork();
            });

            _output = "That took " + elapsedMiliseconds + " milliesconds";
        }

        private function doSomeWork(iterations : uint = 10000000) : void {
            for (var i : uint = 0; i < iterations; i++) {
            }
        }
	]]>
	</mx:Script>
</mx:Application>
